import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
import json
from datetime import datetime
import os

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot('7366514318:AAFNSvdBe5L9RM27mY9OnBEwRIH2dmizUVs')

# –•—Ä–∞–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
active_sessions = {}

# URL –≤–∞—à–µ–≥–æ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π URL –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è)
WEBAPP_URL = "https://swensi17.github.io/films-friends/player.html"  # URL –Ω–∞ GitHub Pages

def create_main_markup():
    markup = InlineKeyboardMarkup()
    markup.row_width = 2
    markup.add(
        InlineKeyboardButton("üé¨ –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä", callback_data="create_watch"),
        InlineKeyboardButton("üîó –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", callback_data="join_watch"),
        InlineKeyboardButton("üìã –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏", callback_data="list_sessions"),
        InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")
    )
    return markup

def create_watch_markup(session_id):
    markup = InlineKeyboardMarkup()
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ mini app —Å –ø–µ—Ä–µ–¥–∞—á–µ–π URL –≤–∏–¥–µ–æ
    session = active_sessions.get(session_id)
    if session:
        webapp = WebAppInfo(url=f"{WEBAPP_URL}?session={session_id}&url={session['url']}")
        markup.add(InlineKeyboardButton(
            text="‚ñ∂Ô∏è –û—Ç–∫—Ä—ã—Ç—å –ø–ª–µ–µ—Ä",
            web_app=webapp
        ))
        markup.add(
            InlineKeyboardButton("üì® –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π", callback_data=f"invite_{session_id}"),
            InlineKeyboardButton("üí¨ –ß–∞—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–∞", callback_data=f"chat_{session_id}")
        )
    return markup

@bot.message_handler(commands=['start'])
def send_welcome(message):
    welcome_text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∏–ª—å–º–æ–≤ –∏ —Å–µ—Ä–∏–∞–ª–æ–≤.\n\n"
        "üéØ –ß—Ç–æ —è —É–º–µ—é:\n"
        "‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å –∫–æ–º–Ω–∞—Ç—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞\n"
        "‚Ä¢ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä —Å –¥—Ä—É–∑—å—è–º–∏\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥—Ä—É–∑—å—è–º\n"
        "‚Ä¢ –û–±—â–∞—Ç—å—Å—è –≤ —á–∞—Ç–µ –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    bot.send_message(message.chat.id, welcome_text, reply_markup=create_main_markup())

@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    if call.data == "create_watch":
        bot.answer_callback_query(call.id)
        bot.send_message(call.message.chat.id, 
            "üé¨ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∏–ª—å–º –∏–ª–∏ —Å–µ—Ä–∏–∞–ª, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å")
        
    elif call.data.startswith("start_"):
        session_id = call.data.split("_")[1]
        if session_id in active_sessions:
            markup = create_watch_markup(session_id)
            bot.edit_message_reply_markup(
                call.message.chat.id,
                call.message.message_id,
                reply_markup=markup
            )
            
    elif call.data == "join_watch":
        bot.answer_callback_query(call.id)
        if active_sessions:
            markup = InlineKeyboardMarkup()
            for session_id, session in active_sessions.items():
                markup.add(InlineKeyboardButton(
                    f"üì∫ {session['title']} ({session['creator_name']})",
                    callback_data=f"join_{session_id}"
                ))
            bot.send_message(call.message.chat.id, "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Å—Å–∏–∏:", reply_markup=markup)
        else:
            bot.send_message(call.message.chat.id, "üö´ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –ø–æ–∫–∞ –Ω–µ—Ç")

    elif call.data.startswith("join_"):
        session_id = call.data.split("_")[1]
        if session_id in active_sessions:
            session = active_sessions[session_id]
            if call.from_user.id not in session['viewers']:
                session['viewers'].append(call.from_user.id)
            markup = create_watch_markup(session_id)
            bot.send_message(
                call.message.chat.id,
                f"‚úÖ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É!\nüé¨ {session['title']}",
                reply_markup=markup
            )

@bot.message_handler(content_types=['web_app_data'])
def handle_webapp_data(message):
    try:
        data = json.loads(message.web_app_data.data)
        session_id = data.get('session_id')
        action = data.get('action')
        
        if action == 'sync':
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
            current_time = data.get('currentTime')
            if session_id in active_sessions:
                session = active_sessions[session_id]
                for viewer_id in session['viewers']:
                    if viewer_id != message.from_user.id:
                        bot.send_message(
                            viewer_id,
                            f"‚è± –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏: {current_time} —Å–µ–∫—É–Ω–¥"
                        )
        
        elif action == 'chat_message':
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞
            if session_id in active_sessions:
                session = active_sessions[session_id]
                for viewer_id in session['viewers']:
                    if viewer_id != message.from_user.id:
                        bot.send_message(
                            viewer_id,
                            f"üí¨ {message.from_user.first_name}: {data.get('message')}"
                        )

    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")

@bot.message_handler(func=lambda message: True)
def handle_messages(message):
    if message.text.startswith(('http://', 'https://')):
        session_id = str(len(active_sessions) + 1)
        active_sessions[session_id] = {
            'url': message.text,
            'creator_id': message.from_user.id,
            'creator_name': message.from_user.first_name,
            'title': f"–°–µ—Å—Å–∏—è #{session_id}",
            'created_at': datetime.now().strftime("%H:%M:%S"),
            'viewers': [message.from_user.id]
        }
        
        markup = create_watch_markup(session_id)
        
        response_text = (
            f"üéâ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞!\n"
            f"üîó –°—Å—ã–ª–∫–∞: {message.text[:50]}...\n"
            f"üë§ –°–æ–∑–¥–∞—Ç–µ–ª—å: {message.from_user.first_name}\n"
            f"‚è∞ –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {active_sessions[session_id]['created_at']}"
        )
        
        bot.reply_to(message, response_text, reply_markup=markup)
    else:
        bot.reply_to(message, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.infinity_polling()
