import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
import json
from datetime import datetime
import os
from urllib.parse import quote
import uuid

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot('7366514318:AAFNSvdBe5L9RM27mY9OnBEwRIH2dmizUVs')

# –•—Ä–∞–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
active_sessions = {}

class StreamSession:
    def __init__(self, url, creator_id, creator_name, title):
        self.url = url
        self.creator_id = creator_id
        self.creator_name = creator_name
        self.title = title
        self.created_at = datetime.now().strftime("%H:%M:%S")
        self.viewers = {}  # {user_id: {'name': name, 'joined_at': time, 'last_active': time}}
        self.stream_start_time = datetime.now().timestamp()  # –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏
        self.is_active = True

    def add_viewer(self, user_id, user_name):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∑—Ä–∏—Ç–µ–ª—è –≤ —Å–µ—Å—Å–∏—é"""
        if user_id not in self.viewers:
            self.viewers[user_id] = {
                'name': user_name,
                'joined_at': datetime.now().strftime("%H:%M:%S"),
                'last_active': datetime.now().timestamp()
            }
            return True
        return False

    def remove_viewer(self, user_id):
        """–£–¥–∞–ª—è–µ—Ç –∑—Ä–∏—Ç–µ–ª—è –∏–∑ —Å–µ—Å—Å–∏–∏"""
        if user_id in self.viewers:
            del self.viewers[user_id]

    def get_current_stream_time(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ø–æ—Ç–æ–∫–∞"""
        if not self.is_active:
            return 0
        return datetime.now().timestamp() - self.stream_start_time

    def get_viewers_info(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑—Ä–∏—Ç–µ–ª—è—Ö"""
        return [{'id': uid, 'name': info['name'], 'joined_at': info['joined_at']} 
                for uid, info in self.viewers.items()]

    def end_stream(self):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –ø–æ—Ç–æ–∫"""
        self.is_active = False
        return json.dumps({
            'type': 'stream_ended'
        })

def create_invite_link(session_id):
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è —Å–µ—Å—Å–∏–∏"""
    return f"https://t.me/swensaiii_bot?start=join_{session_id}"

def create_main_markup():
    markup = InlineKeyboardMarkup()
    markup.row_width = 2
    markup.add(
        InlineKeyboardButton("üé¨ –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä", callback_data="create_watch"),
        InlineKeyboardButton("üîó –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", callback_data="join_watch"),
        InlineKeyboardButton("üìã –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏", callback_data="list_sessions"),
        InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")
    )
    return markup

def create_watch_markup(session_id, user_id):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
    session = active_sessions[session_id]
    current_time = session.get_current_stream_time()
    
    webapp = WebAppInfo(
        url=f"{WEBAPP_URL}?session={session_id}&url={quote(session.url)}&st={session.stream_start_time}"
    )
    
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton(
        text="‚ñ∂Ô∏è –û—Ç–∫—Ä—ã—Ç—å –ø–ª–µ–µ—Ä",
        web_app=webapp
    ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è
    if user_id == session.creator_id:
        markup.add(InlineKeyboardButton(
            text="üõë –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—é",
            callback_data=f"end_stream_{session_id}"
        ))
    
    return markup

# URL –≤–∞—à–µ–≥–æ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
WEBAPP_URL = "https://swensi17.github.io/films-friends/player.html"

def broadcast_viewer_count(session_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ–º –∑—Ä–∏—Ç–µ–ª—è–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑—Ä–∏—Ç–µ–ª–µ–π"""
    if session_id in active_sessions:
        session = active_sessions[session_id]
        update_message = json.dumps({
            'type': 'viewer_update',
            'count': len(session.viewers)
        })
        for viewer_id in session.viewers:
            try:
                bot.send_message(viewer_id, update_message)
            except Exception as e:
                print(f"Error sending viewer update to {viewer_id}: {e}")

@bot.message_handler(commands=['start'])
def send_welcome(message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ —Å–µ—Å—Å–∏–∏
    args = message.text.split()
    if len(args) > 1 and args[1].startswith('join_'):
        session_id = args[1].replace('join_', '')
        if session_id in active_sessions:
            session = active_sessions[session_id]
            if session.add_viewer(message.from_user.id, message.from_user.first_name):
                current_time = session.get_current_stream_time()
                webapp = WebAppInfo(
                    url=f"{WEBAPP_URL}?session={session_id}&url={quote(session.url)}&st={session.stream_start_time}"
                )
                
                markup = InlineKeyboardMarkup()
                markup.add(InlineKeyboardButton(
                    text="‚ñ∂Ô∏è –û—Ç–∫—Ä—ã—Ç—å –ø–ª–µ–µ—Ä",
                    web_app=webapp
                ))
                
                response_text = (
                    f"‚úÖ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É!\n"
                    f"üë§ –°–æ–∑–¥–∞—Ç–µ–ª—å: {session.creator_name}\n"
                    f"üë• –ó—Ä–∏—Ç–µ–ª–µ–π: {len(session.viewers)}"
                )
                bot.reply_to(message, response_text, reply_markup=markup)
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –æ –Ω–æ–≤–æ–º –∑—Ä–∏—Ç–µ–ª–µ
                broadcast_viewer_count(session_id)
            else:
                bot.reply_to(message, "‚ùå –í—ã —É–∂–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏")
        else:
            bot.reply_to(message, "‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–∞")
    else:
        welcome_text = (
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∏–ª—å–º–æ–≤ –∏ —Å–µ—Ä–∏–∞–ª–æ–≤.\n\n"
            "üéØ –ß—Ç–æ —è —É–º–µ—é:\n"
            "‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å –∫–æ–º–Ω–∞—Ç—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞\n"
            "‚Ä¢ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä —Å –¥—Ä—É–∑—å—è–º–∏\n"
            "‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥—Ä—É–∑—å—è–º\n"
            "‚Ä¢ –û–±—â–∞—Ç—å—Å—è –≤ —á–∞—Ç–µ –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        bot.send_message(message.chat.id, welcome_text, reply_markup=create_main_markup())

@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    if call.data == "create_watch":
        bot.answer_callback_query(call.id)
        bot.send_message(call.message.chat.id, 
            "üé¨ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∏–ª—å–º –∏–ª–∏ —Å–µ—Ä–∏–∞–ª, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å")
    
    elif call.data.startswith("invite_"):
        session_id = call.data.split("_")[1]
        if session_id in active_sessions:
            session = active_sessions[session_id]
            invite_link = create_invite_link(session_id)
            share_text = (
                f"üé¨ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ —Å–æ–≤–º–µ—Å—Ç–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä\n\n"
                f"–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫–æ –º–Ω–µ! –ú—ã —Å–º–æ—Ç—Ä–∏–º:\n"
                f"üé• {session.title}\n"
                f"üë• –ó—Ä–∏—Ç–µ–ª–µ–π: {len(session.viewers)}\n\n"
                f"üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:\n{invite_link}"
            )
            markup = InlineKeyboardMarkup()
            markup.add(InlineKeyboardButton(
                "üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ–º",
                switch_inline_query=share_text
            ))
            bot.send_message(
                call.message.chat.id,
                f"üì® –û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥—Ä—É–∑—å—è–º:\n\n{share_text}",
                reply_markup=markup
            )
            
    elif call.data == "join_watch":
        bot.answer_callback_query(call.id)
        if active_sessions:
            markup = InlineKeyboardMarkup()
            for session_id, session in active_sessions.items():
                markup.add(InlineKeyboardButton(
                    f"üì∫ {session.title} ({session.creator_name}) - üë• {len(session.viewers)}",
                    callback_data=f"join_{session_id}"
                ))
            bot.send_message(call.message.chat.id, "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Å—Å–∏–∏:", reply_markup=markup)
        else:
            bot.send_message(call.message.chat.id, "üö´ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –ø–æ–∫–∞ –Ω–µ—Ç")

    elif call.data.startswith("join_"):
        session_id = call.data.split("_")[1]
        if session_id in active_sessions:
            session = active_sessions[session_id]
            if session.add_viewer(call.from_user.id, call.from_user.first_name):
                markup = create_watch_markup(session_id, call.from_user.id)
                bot.send_message(
                    call.message.chat.id,
                    f"‚úÖ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É!\nüé¨ {session.title}",
                    reply_markup=markup
                )
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –æ –Ω–æ–≤–æ–º –∑—Ä–∏—Ç–µ–ª–µ
                broadcast_viewer_count(session_id)
            else:
                bot.send_message(call.message.chat.id, "‚ùå –í—ã —É–∂–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏")

    elif call.data.startswith("end_stream_"):
        session_id = call.data.split("_")[2]
        if session_id in active_sessions:
            session = active_sessions[session_id]
            if call.from_user.id == session.creator_id:
                end_message = session.end_stream()
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∑—Ä–∏—Ç–µ–ª–µ–π
                for viewer_id in session.viewers:
                    try:
                        bot.send_message(viewer_id, end_message)
                    except Exception as e:
                        print(f"Error sending end message to {viewer_id}: {e}")
                
                bot.answer_callback_query(
                    call.id,
                    "‚úÖ –¢—Ä–∞–Ω—Å–ª—è—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
                )
            else:
                bot.answer_callback_query(
                    call.id,
                    "‚ùå –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—é"
                )

@bot.message_handler(func=lambda message: True)
def handle_messages(message):
    if message.text.startswith(('http://', 'https://')):
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –¥–ª—è –≤–∏–¥–µ–æ
        session_id = str(uuid.uuid4())
        session = StreamSession(
            url=message.text,
            creator_id=message.from_user.id,
            creator_name=message.from_user.first_name,
            title="–ü—Ä—è–º–æ–π —ç—Ñ–∏—Ä"
        )
        session.add_viewer(message.from_user.id, message.from_user.first_name)
        active_sessions[session_id] = session
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        markup = create_watch_markup(session_id, message.from_user.id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        response_text = (
            f"üéâ –°—Ç—Ä–∏–º —Å–æ–∑–¥–∞–Ω!\n"
            f"üë§ –°–æ–∑–¥–∞—Ç–µ–ª—å: {session.creator_name}\n"
            f"üë• –ó—Ä–∏—Ç–µ–ª–µ–π: {len(session.viewers)}\n\n"
            f"üì® –ù–∞–∂–º–∏—Ç–µ '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π', —á—Ç–æ–±—ã –ø–æ–∑–≤–∞—Ç—å –∑—Ä–∏—Ç–µ–ª–µ–π!"
        )
        
        bot.reply_to(message, response_text, reply_markup=markup)
        broadcast_viewer_count(session_id)
    else:
        bot.reply_to(message, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–∏–º–∞")

@bot.message_handler(content_types=['web_app_data'])
def handle_webapp_data(message):
    try:
        data = json.loads(message.web_app_data.data)
        session_id = data.get('session_id')
        action = data.get('action')
        
        if session_id in active_sessions:
            session = active_sessions[session_id]
            
            if action == 'viewer_joined':
                if session.add_viewer(message.from_user.id, message.from_user.first_name):
                    broadcast_viewer_count(session_id)
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤—Å–µ–º –∑—Ä–∏—Ç–µ–ª—è–º –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
                    sync_message = json.dumps({
                        'type': 'sync_time',
                        'stream_start_time': session.stream_start_time,
                        'server_time': datetime.now().timestamp()
                    })
                    
                    for viewer_id in session.viewers:
                        try:
                            bot.send_message(viewer_id, sync_message)
                        except Exception as e:
                            print(f"Error sending sync message: {e}")
            
            elif action == 'viewer_left':
                session.remove_viewer(message.from_user.id)
                broadcast_viewer_count(session_id)
            
            elif action == 'viewer_active':
                if message.from_user.id in session.viewers:
                    session.viewers[message.from_user.id]['last_active'] = datetime.now().timestamp()
    
    except Exception as e:
        print(f"Error handling webapp data: {e}")
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.infinity_polling()
